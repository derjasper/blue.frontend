JavaScript core
===============

The core scans all CSS files for custom rules, listens on DOM changes and media
querys and en-/disables the rules.

The core automatically registers all plugins using the :doc:`../jspluginapi/pluginmanager`.

On how the custom rules magic works, read :doc:`../sassmodules/customrules`.


JavaScript
----------

core.js
*******

.. js:data:: blueleaf.customrules.properties

   An associative array of properties:
   ``properties[mediaquery].selectors[selector][i] = {rule: rule, options: options};``

.. js:data:: blueleaf.customrules.enabledProperties

   A map containing information of enabled properties per DOM element:
   ``enabledProperties.get(DOMElement)[i]="mediaquery~selector~i";``

.. js:function:: blueleaf.customrules.addProperty(mq,sel,rule,options)

   :param string mq: Media Query.

   :param string sel: Selector.

   :param string rule: Rule identifier.
 
   :param object options: An associative array of options.

.. js:function:: blueleaf.customrules.addProperties(tree)

   A tree generated by the CSS Parser. All rules will be merged to ``ruleslist``.

   :param object tree: The tree.

.. js:function:: blueleaf.customrules.enableProperty(elm,mq,sel,index)

   Enables a property.

   :param Element elm: A DOM element.

   :param string mq: Media Query.

   :param string sel: Selector.

   :param string index: Property index.

.. js:function:: blueleaf.customrules.disableProperty(elm,mq,sel,index)

   Disables a property. Parameters are the same as in ``enableProperty``.

.. js:function:: blueleaf.customrules.apply()

   *Deprecated* Re-applys JavaScript-based rules. (If you need to use this, it's a bug.)

.. js:function:: blueleaf.customrules.init()

   Initializes the custom rules. After the init, no more rules or properties can
   be added. blue leaf will handle media querys and DOM changes, the framework 
   should be mostly transparent to the developer.