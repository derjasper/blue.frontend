@function _processContainerSize($val) {
    @if unitless($val) {
        @return $val*$container;
    }
    @else {
        @return $val;
    }
}
@mixin _processSizing($val,$mode) { // $mode: width or height
    @if $val!=auto {
        // full width
        @if $val==full {
            #{$mode}:100%;
        }
        
        // full screen width
        @else if $val==screen {
            $tmp:100vh;
            @if ($mode=="width") {
                $tmp:100vw;
            }

            #{$mode}:$tmp;
        }
        
        // aspect ratio
        @else if (length($val)==2 and nth($val,2)=="ar") {
            @include customrule(container-aspectratio, (adjust:$mode,factor:nth($val,1)));
        }
        
        // min/max width
        @else {            
            @if length($val)==2 and nth($val,1)==nth($val,2) {
                #{$mode}: _processContainerSize(nth($val,1));
            }
            @else {
                #{$mode}: 100%;
            }

            @if (length($val)==1) {
                max-#{$mode}: _processContainerSize($val);
            }
            @else {
                @if nth($val,1)!=auto {
                    min-#{$mode}: _processContainerSize(nth($val,1));
                }
                @if nth($val,2)!=auto {
                    max-#{$mode}: _processContainerSize(nth($val,2));
                }
            }
        }
    }
    @else {
        #{$mode}:auto;
    }
}

// only apply to block elements
@mixin container($width:auto,$height:auto,$flags...) {
    //display:block; // commented because this causes incompatibility with the visibility module
    
    // default flags
    @if (length($flags)==0) {
        $flags:(center);
    }
    
    // general    
    *zoom:1;

    &:before, &:after {
	content:"";
	display:table;
    }
    &:after {
        clear:both;
    }
    
    
    // position
    $positionType: regular;
    @if index($flags,absolute) {
        position:absolute;
        $positionType: alt;
    } 
    @else if index($flags,fixed) {
        position:fixed;
        $positionType: alt;
    }
    @else {
        position:relative;
    }                                                       
    
    // floating (don't use in combination with alignment)
    @if index($flags,float-left) {
        float:left;
    } 
    @else if index($flags,float-right) {
        float:right;
    }
    @else if index($flags,float-none) {
        float:none;
    }
    
    // TODO docs (sizing) + demo
    
    // sizing
    // Notice: designed for use with unitless numbers, %, vw, vh, vmin, vmax
    @include _processSizing($width,"width");
    @include _processSizing($height,"height");
    
    // alignment
    $align-transform-x:0;
    $align-transform-y:0;
    
    @if index($flags,left) {
        @if $positionType==regular {
            margin-left:0;
            margin-right:auto;
        }
        @else {
            $align-transform-x: 0;
            left:0;
            right:auto;
        }
    } 
    @if index($flags,center) {
        @if $positionType==regular {
            margin-left:auto;
            margin-right:auto;
        }
        @else {
            left: 50%;
            $align-transform-x: -50%;
            
            // unused alternative; only works with fixed width
            //left:0;
            //right:0;
            //margin-left:auto;
            //margin-right:auto;
        }
    }
    @if index($flags,right) {
        @if $positionType==regular {
            margin-left:auto;
            margin-right:0;
        }
        @else {
            $align-transform-x: 0;
            left:auto;
            right:0;
        }
    }
    @if index($flags,top) {
        @if $positionType==regular {
            $align-transform-y: 0%;
            top:0%;
        }
        @else {
            $align-transform-y: 0;
            top:0;
            bottom:auto;
        }
    } 
    @if index($flags,middle) {
        top: 50%;
        $align-transform-y: -50%;
        
        // unused alternative; only works with fixed height and not for regular positioning
        //top:0;
        //bottom:0;
        //margin-top:auto;
        //margin-bottom:auto;
    } 
    @if index($flags,bottom) {
        @if $positionType==regular {
            top:100%;
            $align-transform-y: -100%;
        }
        @else {
            $align-transform-y: 0%;
            top:auto;
            bottom:0;
        }
    }
    @if index($flags,outer-top) {
        @if $positionType==regular {
            top:auto;
            bottom:auto;
            $align-transform-y: -100%;
        }
        @else {
            top:auto;
            bottom:100%;
        }
    }
    @if index($flags,outer-bottom) {
        @if $positionType==regular {
            top:100%;
            bottom:auto;
        }
        @else {
            top:100%;
            bottom:auto;
        }
    }
    @if index($flags,outer-left) {
        @if $positionType==regular {
            left:auto;
            right:auto;
            $align-transform-x: -100%;
        }
        @else {
            left:auto;
            right:100%;
        }
    }
    @if index($flags,outer-right) {
        @if $positionType==regular {
            left:100%;
            right:auto;
        }
        @else {
            left:100%;
            right:auto;
        }
    }
    
    transform:translate3d($align-transform-x,$align-transform-y,0);
}

@include predefine("container") {
    @include container();
}

// convience mixins, use with care
@mixin container-spacing($spacing...) {
    $spacing:multiply-list($gutter,$spacing);    
    margin:$spacing;
}
@mixin container-breakout($spacing...) {
    $spacing:multiply-list(-$gutter,$spacing);    
    margin:$spacing;
}